"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[8345],{96847:(e,n,s)=>{s.r(n),s.d(n,{default:()=>l});var a=s(64304);const t={href:"https://github.com/OwO-Network/DeepLX/",target:"_blank",rel:"noopener noreferrer"},p=(0,a.uE)('<p>以下是通过 Docker 部署 DeepLX 的配置文件，简单易懂，你可以快速启动你的翻译服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>\n\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">deeplx</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> ghcr.io/owo<span class="token punctuation">-</span>network/deeplx<span class="token punctuation">:</span>latest\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> deeplx\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;32770:1188&quot;</span>\n    <span class="token comment"># environment:</span>\n    <span class="token comment"># 如果设置了 TOKEN，则每个请求都需要包含 Authorization 标头。</span>\n    <span class="token comment"># - TOKEN=helloworld</span>\n    <span class="token comment"># 如果设置了 AUTHKEY，在 429 响应（请求过多/过快）后，会使用官方的 AuthKey 进行请求。如果同时使用多个 authKey，需要用逗号分隔。</span>\n    <span class="token comment"># - AUTHKEY=xxxxxxx:fx</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你已经注册了 DeepL 的免费接口，建议设置 AUTHKEY。这样，一旦遇到请求频率过快的情况，DeepLX 会自动使用官方的 AuthKey 进行请求，从而加快翻译速度，提高效率。</p>',3),o={},l=(0,s(86683).Z)(o,[["render",function(e,n){const s=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[(0,a._)("p",null,[(0,a._)("a",t,[(0,a.Uk)("DeepLX"),(0,a.Wm)(s)]),(0,a.Uk)(" 提供了一个基于 DeepL 的免费翻译服务。它可以将 DeepL Free API 转换为本地 API，使得第三方程序能够方便地使用 DeepL 提供的翻译功能。")]),p])}]])},86683:(e,n)=>{n.Z=(e,n)=>{const s=e.__vccOpts||e;for(const[e,a]of n)s[e]=a;return s}},42031:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a=JSON.parse('{"key":"v-021b3314","path":"/services/dockers-on-nas/deeplx.html","title":"DeepLX - 免费翻译接口","lang":"zh-CN","frontmatter":{"article":false,"title":"DeepLX - 免费翻译接口","order":102,"description":"DeepLX 提供了一个基于 DeepL 的免费翻译服务。它可以将 DeepL Free API 转换为本地 API，使得第三方程序能够方便地使用 DeepL 提供的翻译功能。 以下是通过 Docker 部署 DeepLX 的配置文件，简单易懂，你可以快速启动你的翻译服务： version: \\"3\\" services: deeplx: image: ghcr.io/owo-network/deeplx:latest container_name: deeplx restart: always ports: - \\"32770:1188\\" # environment: # 如果设置了 TOKEN，则每个请求都需要包含 Authorization 标头。 # - TOKEN=helloworld # 如果设置了 AUTHKEY，在 429 响应（请求过多/过快）后，会使用官方的 AuthKey 进行请求。如果同时使用多个 authKey，需要用逗号分隔。 # - AUTHKEY=xxxxxxx:fx","head":[["meta",{"property":"og:url","content":"https://newzone.top/services/dockers-on-nas/deeplx.html"}],["meta",{"property":"og:site_name","content":"LearnData-开源笔记"}],["meta",{"property":"og:title","content":"DeepLX - 免费翻译接口"}],["meta",{"property":"og:description","content":"DeepLX 提供了一个基于 DeepL 的免费翻译服务。它可以将 DeepL Free API 转换为本地 API，使得第三方程序能够方便地使用 DeepL 提供的翻译功能。 以下是通过 Docker 部署 DeepLX 的配置文件，简单易懂，你可以快速启动你的翻译服务： version: \\"3\\" services: deeplx: image: ghcr.io/owo-network/deeplx:latest container_name: deeplx restart: always ports: - \\"32770:1188\\" # environment: # 如果设置了 TOKEN，则每个请求都需要包含 Authorization 标头。 # - TOKEN=helloworld # 如果设置了 AUTHKEY，在 429 响应（请求过多/过快）后，会使用官方的 AuthKey 进行请求。如果同时使用多个 authKey，需要用逗号分隔。 # - AUTHKEY=xxxxxxx:fx"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-05T11:04:08.000Z"}],["meta",{"property":"article:author","content":"清顺"}],["meta",{"property":"article:modified_time","content":"2024-02-05T11:04:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"DeepLX - 免费翻译接口\\",\\"description\\":\\"DeepLX 提供了一个基于 DeepL 的免费翻译服务。它可以将 DeepL Free API 转换为本地 API，使得第三方程序能够方便地使用 DeepL 提供的翻译功能。 以下是通过 Docker 部署 DeepLX 的配置文件，简单易懂，你可以快速启动你的翻译服务： version: \\\\\\"3\\\\\\" services: deeplx: image: ghcr.io/owo-network/deeplx:latest container_name: deeplx restart: always ports: - \\\\\\"32770:1188\\\\\\" # environment: # 如果设置了 TOKEN，则每个请求都需要包含 Authorization 标头。 # - TOKEN=helloworld # 如果设置了 AUTHKEY，在 429 响应（请求过多/过快）后，会使用官方的 AuthKey 进行请求。如果同时使用多个 authKey，需要用逗号分隔。 # - AUTHKEY=xxxxxxx:fx\\"}"]]},"headers":[],"git":{"createdTime":1707131048000,"updatedTime":1707131048000,"contributors":[{"name":"cenzhifang","email":"105171265+cenzhifang@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":0.81,"words":243},"filePathRelative":"services/dockers-on-nas/deeplx.md","localizedDate":"2024年2月5日","excerpt":"<p><a href=\\"https://github.com/OwO-Network/DeepLX/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">DeepLX</a> 提供了一个基于 DeepL 的免费翻译服务。它可以将 DeepL Free API 转换为本地 API，使得第三方程序能够方便地使用 DeepL 提供的翻译功能。</p>\\n<p>以下是通过 Docker 部署 DeepLX 的配置文件，简单易懂，你可以快速启动你的翻译服务：</p>\\n<div class=\\"language-yaml line-numbers-mode\\" data-ext=\\"yml\\" data-title=\\"yml\\"><pre class=\\"language-yaml\\"><code><span class=\\"token key atrule\\">version</span><span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"3\\"</span>\\n\\n<span class=\\"token key atrule\\">services</span><span class=\\"token punctuation\\">:</span>\\n  <span class=\\"token key atrule\\">deeplx</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token key atrule\\">image</span><span class=\\"token punctuation\\">:</span> ghcr.io/owo<span class=\\"token punctuation\\">-</span>network/deeplx<span class=\\"token punctuation\\">:</span>latest\\n    <span class=\\"token key atrule\\">container_name</span><span class=\\"token punctuation\\">:</span> deeplx\\n    <span class=\\"token key atrule\\">restart</span><span class=\\"token punctuation\\">:</span> always\\n    <span class=\\"token key atrule\\">ports</span><span class=\\"token punctuation\\">:</span>\\n      <span class=\\"token punctuation\\">-</span> <span class=\\"token string\\">\\"32770:1188\\"</span>\\n    <span class=\\"token comment\\"># environment:</span>\\n    <span class=\\"token comment\\"># 如果设置了 TOKEN，则每个请求都需要包含 Authorization 标头。</span>\\n    <span class=\\"token comment\\"># - TOKEN=helloworld</span>\\n    <span class=\\"token comment\\"># 如果设置了 AUTHKEY，在 429 响应（请求过多/过快）后，会使用官方的 AuthKey 进行请求。如果同时使用多个 authKey，需要用逗号分隔。</span>\\n    <span class=\\"token comment\\"># - AUTHKEY=xxxxxxx:fx</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);